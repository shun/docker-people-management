import {MigrationInterface, QueryRunner} from "typeorm";

export class Init1621702329742 implements MigrationInterface {
    name = 'Init1621702329742'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query("CREATE TABLE `Locations` (`id` int NOT NULL AUTO_INCREMENT, `company_name` varchar(64) NOT NULL COMMENT '会社名', `branch_name` varchar(64) NOT NULL COMMENT '支社名', `postalcode` char(8) NOT NULL COMMENT '郵便番号。例：xxx-xxxx', `address` varchar(255) NOT NULL COMMENT '住所', `address_kana` varchar(255) NOT NULL COMMENT 'じゅうしょ（かな）', `tel` char(20) NOT NULL COMMENT '代表電話番号。例：xx-xxxx-xxxx', `fax` char(20) NOT NULL COMMENT '代表FAX番号。例：xx-xxxx-xxxx', `start_date` date NOT NULL COMMENT '運用開始日', `end_date` date NULL COMMENT '運用終了日', `created_at` datetime(6) NOT NULL COMMENT '作成日時' DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL COMMENT '更新日時' DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE current_timestamp(), PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `OrgLayers` (`id` int NOT NULL AUTO_INCREMENT, `name` varchar(16) NOT NULL COMMENT '階層名', `deep` int(11) NOT NULL COMMENT '階層の深さ', `start_date` date NOT NULL COMMENT '運用開始日', `end_date` date NULL COMMENT '運用終了日', `created_at` datetime(6) NOT NULL COMMENT '作成日時' DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL COMMENT '更新日時' DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE current_timestamp(), PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `Positions` (`name` varchar(16) NOT NULL COMMENT '役職名', `value` int(11) NOT NULL COMMENT '役職値', `start_date` date NOT NULL COMMENT '運用開始日', `end_date` date NULL COMMENT '運用終了日', `created_at` datetime(6) NOT NULL COMMENT '作成日時' DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL COMMENT '更新日時' DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE current_timestamp(), PRIMARY KEY (`name`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `Ranks` (`name` varchar(16) NOT NULL COMMENT '職能名', `value` int(11) NOT NULL COMMENT '職能値', `start_date` date NOT NULL COMMENT '運用開始日', `end_date` date NULL COMMENT '運用終了日', `created_at` datetime(6) NOT NULL COMMENT '作成日時' DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL COMMENT '更新日時' DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE current_timestamp(), PRIMARY KEY (`name`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `Sections` (`id` int NOT NULL AUTO_INCREMENT, `layer_id` int(11) NOT NULL COMMENT '所属階層のid', `name` varchar(16) NOT NULL COMMENT '所属名', `path` varchar(255) NOT NULL COMMENT '所属のパス', `start_date` date NOT NULL COMMENT '運用開始日', `end_date` date NULL COMMENT '運用終了日', `created_at` datetime(6) NOT NULL COMMENT '作成日時' DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL COMMENT '更新日時' DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE current_timestamp(), PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `UserProperties` (`id` int NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL COMMENT 'ユーザのid', `key` varchar(16) NOT NULL COMMENT '属性のキー', `value` varchar(255) NOT NULL COMMENT '属性の値', `type` char(16) NOT NULL COMMENT 'valueの型', `start_date` date NOT NULL COMMENT '運用開始日', `end_date` date NULL COMMENT '運用終了日', `created_at` datetime(6) NOT NULL COMMENT '作成日時' DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL COMMENT '更新日時' DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE current_timestamp(), PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `UserOrganizations` (`id` int NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL COMMENT 'ユーザのid', `section_id` int(11) NOT NULL COMMENT '所属のid', `priority` int(11) NOT NULL COMMENT '所属の優先順位。小さい方が優先順位が高い', `position_name` varchar(16) NOT NULL COMMENT '役職名', `start_date` date NOT NULL COMMENT '運用開始日', `end_date` date NULL COMMENT '運用終了日', `created_at` datetime(6) NOT NULL COMMENT '作成日時' DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL COMMENT '更新日時' DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE current_timestamp(), PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `UserLocations` (`id` int NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL COMMENT 'ユーザのid', `location_id` int(11) NOT NULL COMMENT '拠点のid', `start_date` date NOT NULL COMMENT '運用開始日', `end_date` date NULL COMMENT '運用終了日', `created_at` datetime(6) NOT NULL COMMENT '作成日時' DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL COMMENT '更新日時' DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE current_timestamp(), PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `UserRanks` (`id` int NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL COMMENT 'ユーザのid', `rank_name` varchar(16) NOT NULL COMMENT '職能名', `start_date` date NOT NULL COMMENT '運用開始日', `end_date` date NULL COMMENT '運用終了日', `created_at` datetime(6) NOT NULL COMMENT '作成日時' DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL COMMENT '更新日時' DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE current_timestamp(), PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `Users` (`id` int NOT NULL AUTO_INCREMENT, `code` char(12) NOT NULL COMMENT '氏名コード', `sei` varchar(16) NOT NULL COMMENT '姓', `mei` varchar(16) NOT NULL COMMENT '名', `sei_kana` varchar(16) NOT NULL COMMENT 'せい（かな）', `mei_kana` varchar(16) NOT NULL COMMENT 'めい（かな）', `sei_en` char(32) NOT NULL COMMENT '姓（アルファベット）', `mei_en` char(32) NOT NULL COMMENT '名（アルファベット）', `password` char(32) NOT NULL COMMENT 'ホーム認証パスワード', `start_date` date NOT NULL COMMENT '運用開始日', `end_date` date NULL COMMENT '運用終了日', `created_at` datetime(6) NOT NULL COMMENT '作成日時' DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL COMMENT '更新日時' DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE current_timestamp(), PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE VIEW `ViewUserProperties` AS SELECT `up`.`user_id` AS `user_id`, `up`.`key` AS `key`, `up`.`value` AS `value`, `up`.`type` AS `type` FROM `UserProperties` `up` WHERE `up`.`end_date` is NULL");
        await queryRunner.query("INSERT INTO `people`.`typeorm_metadata`(`type`, `schema`, `name`, `value`) VALUES (?, ?, ?, ?)", ["VIEW","people","ViewUserProperties","SELECT `up`.`user_id` AS `user_id`, `up`.`key` AS `key`, `up`.`value` AS `value`, `up`.`type` AS `type` FROM `UserProperties` `up` WHERE `up`.`end_date` is NULL"]);
        await queryRunner.query("CREATE VIEW `ViewUserOrganizations` AS SELECT `u`.`id` AS `user_id`, `u`.`sei` AS `sei`, `u`.`mei` AS `mei`, `up`.`value` AS `user_cd`, `uo`.`priority` AS `priority`, `uo`.`position_name` AS `position_name`, `uo`.`start_date` AS `start_date`, `uo`.`end_date` AS `end_date`, `s`.`path` AS `path`, `p`.`value` AS `position_value` FROM `Users` `u` INNER JOIN `UserProperties` `up` ON `up`.`user_id` = `u`.`id`  INNER JOIN `UserOrganizations` `uo` ON `uo`.`user_id` = `u`.`id`  INNER JOIN `Sections` `s` ON `uo`.`section_id` = `s`.`id`  INNER JOIN `Positions` `p` ON `uo`.`position_name` = `p`.`name` WHERE `u`.`end_date` is NULL AND `up`.`key` = 'user_cd' AND `up`.`end_date` is NULL AND `uo`.`end_date` is NULL AND `s`.`end_date` is NULL AND `p`.`end_date` is NULL");
        await queryRunner.query("INSERT INTO `people`.`typeorm_metadata`(`type`, `schema`, `name`, `value`) VALUES (?, ?, ?, ?)", ["VIEW","people","ViewUserOrganizations","SELECT `u`.`id` AS `user_id`, `u`.`sei` AS `sei`, `u`.`mei` AS `mei`, `up`.`value` AS `user_cd`, `uo`.`priority` AS `priority`, `uo`.`position_name` AS `position_name`, `uo`.`start_date` AS `start_date`, `uo`.`end_date` AS `end_date`, `s`.`path` AS `path`, `p`.`value` AS `position_value` FROM `Users` `u` INNER JOIN `UserProperties` `up` ON `up`.`user_id` = `u`.`id`  INNER JOIN `UserOrganizations` `uo` ON `uo`.`user_id` = `u`.`id`  INNER JOIN `Sections` `s` ON `uo`.`section_id` = `s`.`id`  INNER JOIN `Positions` `p` ON `uo`.`position_name` = `p`.`name` WHERE `u`.`end_date` is NULL AND `up`.`key` = 'user_cd' AND `up`.`end_date` is NULL AND `uo`.`end_date` is NULL AND `s`.`end_date` is NULL AND `p`.`end_date` is NULL"]);
        await queryRunner.query("CREATE VIEW `ViewUserLocations` AS SELECT `u`.`id` AS `user_id`, `u`.`sei` AS `sei`, `u`.`mei` AS `mei`, `up`.`value` AS `user_cd`, `ul`.`start_date` AS `start_date`, `ul`.`end_date` AS `end_date`, `l`.`company_name` AS `company_name`, `l`.`branch_name` AS `branch_name`, `l`.`postalcode` AS `postalcode`, `l`.`address` AS `address`, `l`.`address_kana` AS `address_kana`, `l`.`tel` AS `tel`, `l`.`fax` AS `fax` FROM `Users` `u` INNER JOIN `UserProperties` `up` ON `up`.`user_id` = `u`.`id`  INNER JOIN `UserLocations` `ul` ON `ul`.`user_id` = `u`.`id`  INNER JOIN `Locations` `l` ON `ul`.`location_id` = `l`.`id` WHERE `u`.`end_date` is NULL AND `up`.`key` = 'user_cd' AND `up`.`end_date` is NULL AND `ul`.`end_date` is NULL AND `l`.`end_date` is NULL");
        await queryRunner.query("INSERT INTO `people`.`typeorm_metadata`(`type`, `schema`, `name`, `value`) VALUES (?, ?, ?, ?)", ["VIEW","people","ViewUserLocations","SELECT `u`.`id` AS `user_id`, `u`.`sei` AS `sei`, `u`.`mei` AS `mei`, `up`.`value` AS `user_cd`, `ul`.`start_date` AS `start_date`, `ul`.`end_date` AS `end_date`, `l`.`company_name` AS `company_name`, `l`.`branch_name` AS `branch_name`, `l`.`postalcode` AS `postalcode`, `l`.`address` AS `address`, `l`.`address_kana` AS `address_kana`, `l`.`tel` AS `tel`, `l`.`fax` AS `fax` FROM `Users` `u` INNER JOIN `UserProperties` `up` ON `up`.`user_id` = `u`.`id`  INNER JOIN `UserLocations` `ul` ON `ul`.`user_id` = `u`.`id`  INNER JOIN `Locations` `l` ON `ul`.`location_id` = `l`.`id` WHERE `u`.`end_date` is NULL AND `up`.`key` = 'user_cd' AND `up`.`end_date` is NULL AND `ul`.`end_date` is NULL AND `l`.`end_date` is NULL"]);
        await queryRunner.query("CREATE VIEW `ViewUserRanks` AS SELECT `u`.`id` AS `user_id`, `u`.`sei` AS `sei`, `u`.`mei` AS `mei`, `up`.`value` AS `user_cd`, `ur`.`rank_name` AS `rank_name`, `ur`.`start_date` AS `start_date`, `ur`.`end_date` AS `end_date`, `r`.`value` AS `rank_value` FROM `Users` `u` INNER JOIN `UserProperties` `up` ON `up`.`user_id` = `u`.`id`  INNER JOIN `UserRanks` `ur` ON `ur`.`user_id` = `u`.`id`  INNER JOIN `Ranks` `r` ON `ur`.`rank_name` = `r`.`name` WHERE `u`.`end_date` is NULL AND `up`.`key` = 'user_cd' AND `up`.`end_date` is NULL AND `ur`.`end_date` is NULL AND `r`.`end_date` is NULL");
        await queryRunner.query("INSERT INTO `people`.`typeorm_metadata`(`type`, `schema`, `name`, `value`) VALUES (?, ?, ?, ?)", ["VIEW","people","ViewUserRanks","SELECT `u`.`id` AS `user_id`, `u`.`sei` AS `sei`, `u`.`mei` AS `mei`, `up`.`value` AS `user_cd`, `ur`.`rank_name` AS `rank_name`, `ur`.`start_date` AS `start_date`, `ur`.`end_date` AS `end_date`, `r`.`value` AS `rank_value` FROM `Users` `u` INNER JOIN `UserProperties` `up` ON `up`.`user_id` = `u`.`id`  INNER JOIN `UserRanks` `ur` ON `ur`.`user_id` = `u`.`id`  INNER JOIN `Ranks` `r` ON `ur`.`rank_name` = `r`.`name` WHERE `u`.`end_date` is NULL AND `up`.`key` = 'user_cd' AND `up`.`end_date` is NULL AND `ur`.`end_date` is NULL AND `r`.`end_date` is NULL"]);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query("DELETE FROM `people`.`typeorm_metadata` WHERE `type` = 'VIEW' AND `schema` = ? AND `name` = ?", ["people","ViewUserRanks"]);
        await queryRunner.query("DROP VIEW `ViewUserRanks`");
        await queryRunner.query("DELETE FROM `people`.`typeorm_metadata` WHERE `type` = 'VIEW' AND `schema` = ? AND `name` = ?", ["people","ViewUserLocations"]);
        await queryRunner.query("DROP VIEW `ViewUserLocations`");
        await queryRunner.query("DELETE FROM `people`.`typeorm_metadata` WHERE `type` = 'VIEW' AND `schema` = ? AND `name` = ?", ["people","ViewUserOrganizations"]);
        await queryRunner.query("DROP VIEW `ViewUserOrganizations`");
        await queryRunner.query("DELETE FROM `people`.`typeorm_metadata` WHERE `type` = 'VIEW' AND `schema` = ? AND `name` = ?", ["people","ViewUserProperties"]);
        await queryRunner.query("DROP VIEW `ViewUserProperties`");
        await queryRunner.query("DROP TABLE `Users`");
        await queryRunner.query("DROP TABLE `UserRanks`");
        await queryRunner.query("DROP TABLE `UserLocations`");
        await queryRunner.query("DROP TABLE `UserOrganizations`");
        await queryRunner.query("DROP TABLE `UserProperties`");
        await queryRunner.query("DROP TABLE `Sections`");
        await queryRunner.query("DROP TABLE `Ranks`");
        await queryRunner.query("DROP TABLE `Positions`");
        await queryRunner.query("DROP TABLE `OrgLayers`");
        await queryRunner.query("DROP TABLE `Locations`");
    }

}
